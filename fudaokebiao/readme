核心原则：全局一致性
所有拆分决策都遵循一个最高原则：全局一致性。这意味着，对任何一个列表的拆分，都必须尊重由之前所有列表的拆分所建立的规则，并且它自身也会建立新的规则来约束之后所有列表的拆分。任何拆分行为都不能与已有的规则产生矛盾。
具体拆分规则
1. 拆分前提
不拆分短列表：只包含1个或0个元素的列表，被视为最基本的单元，永远不会被拆分。
2. 拆分顺序
从简到繁：算法严格按照列表内元素数量从小到大的顺序进行处理。
目的：先处理短列表，可以尽早建立起最基本、最明确的“绑定”或“分离”关系，为后续处理更复杂的长列表提供决策依据。
3. 拆分目标
追求平衡：当一个列表需要被拆分时，算法的目标是将其拆分成两个子列表，并使这两个子列表的元素数量尽可能接近（即数量差最小）。
4. 规则一：“绑定”规则 (Must-Link)
来源：当一个包含多个元素的列表（如 [A, B, C]）被拆分为 [A, B] 和 [C] 时，子列表 [A, B] 就建立了一个“绑定”规则。
效果：从这一刻起，元素 A 和 B 在整个系统中被视为一个不可分割的整体。
应用：在后续处理任何其他包含 A 和 B 的列表时（例如 [A, B, D]），A 和 B 必须被划分到同一个子列表中。任何试图将它们分开的拆分方案都是无效的。
5. 规则二：“分离”规则 (Cannot-Link)
来源：同样，当 [A, B, C] 被拆分为 [A, B] 和 [C] 时，也同时建立了一个“分离”规则。
效果：[A, B] 组中的任何元素（即 A 或 B）都不能与 [C] 组中的任何元素（即 C）再被分到同一个子列表中。
应用：在后续处理任何其他列表时（例如 [A, C, E]），任何试图将 A 和 C 放在同一个子列表的拆分方案都是无效的。
6. 规则三：冲突处理与最终决策
约束优先：在决定如何拆分一个新列表时，算法会先找出所有可能的、最平衡的拆分方案。然后，用**“绑定”规则和“分离”规则**对这些方案进行逐一验证。
无效方案作废：任何违反了上述任一规则的拆分方案都会被立即放弃。
无法拆分的情况：如果一个列表的所有可能拆分方案都与之前建立的规则相冲突，那么该列表不能被拆分。它将被视为一个整体，并且它内部的所有元素会因此被“绑定”在一起，形成新的“绑定”规则影响后续列表。
最终选择：算法会从所有有效的拆分方案中，选择那个最平衡（子列表数量差最小）的作为最终结果。
总结流程
处理一个列表 L 的完整思路：
问：L 的长度是否大于1？（否 -> 不拆分）
看：根据已有的“绑定”规则，L 中的元素能被看成几个“原子组”？
找：找出所有将这些“原子组”划分为两半的方案。
查：检查每个方案是否违反了已有的“分离”规则？（是 -> 放弃该方案）
选：从所有通过检查的有效方案中，选出最平衡的一个。
做：
如果找不到任何有效方案 -> L 保持整体，并建立新的“绑定”规则。
如果找到了 -> 按最佳方案拆分，并根据结果建立新的“绑定”和“分离”规则。